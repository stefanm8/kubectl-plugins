#!/usr/local/bin/python3
import subprocess
import argparse

def color(text, name):
    end = '\033[0m'
    clr = dict(
        HEADER = '\033[95m',
        OKBLUE = '\033[36m',
        OKGREEN = '\033[92m',
        WARNING = '\033[93m',
        FAIL = '\033[91m',
        BOLD = '\033[1m',
        UNDERLINE = '\033[4m',
        CYAN = "\033[44m",
        REVERSED = "\033[7m",
    )[name.upper()]
    return "{}{}{}".format(clr, text, end)

def cmd(cmd, *args):
    cmd = "kubectl {}".format(cmd.format(*args))
    out = subprocess.check_output(cmd, shell=True).decode("utf-8").split("\n")
    return [item for item in out if item]

def display(content):
    print(color("   {}".format(content.pop(0)) , "reversed"))
    for index, item in enumerate(content):
        if "*" in item:
            print(color("{}. {}".format(index, item), "cyan"))
            continue
        print(color("{}. {}".format(index, item), "okblue"))

def prompt(content):
    def choice():
        print()
        display([*content])
        try:
            val = str(input(color("Select option (1-{}): ", "underline".format(len(content)))))
            if val.isdigit() and int(val) < len(content):
                return int(val)
        except NameError:
            pass
        print("Invalid input")
        return choice()

    value = choice()
    return tuple(content[value].split())

def main():
    parser = argparse.ArgumentParser("Select Context")
    parser.add_argument("ctx", nargs="?", type=str, help="context to switch")
    parser.add_argument("-i", "--interactive", help="select context interactively", action="store_true")
    args = parser.parse_args()
    contexts = cmd("config get-contexts")
    if args.ctx == None and not args.interactive:
        display(contexts)
        return

    if args.interactive:
        ch = tuple(prompt(contexts))
        if len(ch) == 4:
            name = ch[0]
        else:
            name = ch[1]
        out = cmd("config use-context {}".format(name))
        return

    try:
        out = cmd("config use-context {}".format(args.ctx))
        print(color("\n".join(out), "okgreen"))
    except subprocess.CalledProcessError as e:
        pass

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
